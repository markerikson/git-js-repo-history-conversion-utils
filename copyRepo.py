# This was my initial attempt at a pygit2-based conversion script.
# This was ultimately replaced by cloneAndProcessRepo.py, which uses 
# the pylter-branch library to do the iteration work.

import shutil
import time, datetime as dt

import pygit2
from pygit2 import IndexEntry

from repoFilterUtils import resetTempFolder, writeTempBlob, isFormattableJSSourceFile, isFormattablePythonSourceFile, \
    walktree, OUTPUT_REPO_PATH, SOURCE_REPO_PATH

rewrittenCommits = {}


def copyCommit(srcRepo, destRepo, commit):
    allTreeItems = walktree(srcRepo, commit.tree)

    for treeItem in allTreeItems:
        filePath, treeEntry = treeItem

        fileBlob = srcRepo[treeEntry.id]

        if not fileBlob.id in destRepo:
            destRepo.write(fileBlob.type, fileBlob.read_raw())

    destRepo.write(commit.tree.type, commit.tree.read_raw())

    destRepo.write(commit.type, commit.read_raw())


def collectCommits(repo, maxCommits = 50):
    numCommits = 0
    commits = []

    for commit in repo.walk(repo.head.target, pygit2.GIT_SORT_TOPOLOGICAL | pygit2.GIT_SORT_REVERSE):
        commits.append(commit)
        numCommits += 1
        if numCommits >= maxCommits:
            break

    return commits


def getRewrittenId(commit):
    return rewrittenCommits.get(commit.id, commit.id)


def rewriteCommit(srcRepo, destRepo, currentCommit):
    if not currentCommit.parents:
        print("No parents, copying commit...")
        copyCommit(srcRepo, destRepo, currentCommit)
        print("Copied commit {0}\n".format(currentCommit.id))
        return currentCommit.id
    else:
        index = destRepo.index

        # Look up the original parent commit
        parentCommit = currentCommit.parents[0]

        allParentIds = [p.id for p in currentCommit.parents]
        print("Parent IDs: {0}".format(allParentIds))

        # Get the ID of the rewritten parent commit that was generated by the last iteration
        rewrittenParentHash = rewrittenCommits.get(parentCommit.id, parentCommit.id)
        # Look up that commit object too
        rewrittenParentCommit = destRepo[rewrittenParentHash]

        # Calculate the original diff for this commit
        diff = srcRepo.diff(currentCommit, parentCommit)

        #print("Resetting index to rewritten...")
        # Reset the index to the previously-rewritten commit as our starting point
        index.read_tree(rewrittenParentCommit.tree)



        changedJSFiles = []
        changedPythonFiles = []
        allOtherFiles = []

        print("Checking deltas...")
        for delta in diff.deltas:
            statusChar = delta.status_char()
            # Check for any modified or added files
            if statusChar in ('M', 'A'):
                if(isFormattableJSSourceFile(delta.new_file.path)):
                    changedJSFiles.append(delta)
                elif(isFormattablePythonSourceFile(delta.new_file.path)):
                    changedPythonFiles.append(delta)
                else:
                    allOtherFiles.append(delta)
            elif statusChar == 'D':
                try:
                    index.remove(delta.old_file.path)
                except:
                    pass
            else:
                q = 42
                raise Exception("Unexpected delta status type!")


        transformedFiles = []

        if changedJSFiles or changedPythonFiles:
            print("Transforming JS+PY files...")

            resetTempFolder()

            # TODO Transform these files appropriately
            # TODO Write each file to a temp file in the temp folder, then run transformation
            for delta in changedJSFiles + changedPythonFiles:
                new_file = delta.new_file
                # Remove the existing entry, if any:
                try:
                    index.remove(new_file.path)
                except:
                    pass

                fileBlob = srcRepo[delta.new_file.id]
                tempFilePath = writeTempBlob(fileBlob, new_file.path)
                transformedFiles.append( (new_file.path, new_file.mode, tempFilePath))

            for delta in changedJSFiles:
                print("JS: " + delta.new_file.path)

            for delta in changedPythonFiles:
                print("PY: " + delta.new_file.path)


            # TODO For each transformed file, add it to the repo's object database
            for originalFilePath, originalFileMode, transformedFilePath in transformedFiles:
                transformedFileHash = destRepo.create_blob_fromdisk(transformedFilePath)
                indexEntry = IndexEntry(originalFilePath, transformedFileHash, originalFileMode)
                index.add(indexEntry)

        for delta in allOtherFiles:
            # Replicate all other file operations
            nf = delta.new_file
            fileBlob = srcRepo[nf.id]
            destRepo.write(fileBlob.type, fileBlob.read_raw())

            indexEntry = IndexEntry(nf.path, nf.id, nf.mode)

            index.add(indexEntry)

        newTreeId = index.write_tree()

        newParents = [getRewrittenId(parentCommit) for parent in currentCommit.parents]

        rewrittenCommitId = destRepo.create_commit(
            None,
            currentCommit.author,
            currentCommit.committer,
            currentCommit.message,
            newTreeId,
            newParents
        )

        rewrittenCommits[currentCommit.id] = rewrittenCommitId
        rewrittenCommit = destRepo[rewrittenCommitId]

        print("Rewrote {0} to {1}\n".format(currentCommit.id, rewrittenCommitId))

        return rewrittenCommitId



def main():
    startTime = time.time()

    repo1 = pygit2.Repository(str(SOURCE_REPO_PATH))

    if OUTPUT_REPO_PATH.exists():
        shutil.rmtree(str(OUTPUT_REPO_PATH))

    repo2 = pygit2.init_repository(str(OUTPUT_REPO_PATH), True)

    commits = collectCommits(repo1, 25000)

    numCommits = 1
    totalCommits = len(commits)

    lastCommitId = None

    for commit in commits:
        firstMessageLine = commit.message.splitlines()[0]
        authorName = commit.author.name
        dateString = dt.datetime.utcfromtimestamp(commit.commit_time).strftime("%Y-%m-%d")
        print ("Processing commit {0} ({1}/{2})".format(commit.id, numCommits, totalCommits))
        print("{0} ({1}): {2}".format(dateString, authorName, firstMessageLine))
        lastCommitId = rewriteCommit(repo1, repo2, commit)
        numCommits += 1

    if lastCommitId:
        commit = repo2[lastCommitId]
        if not "master" in repo2.branches:
            repo2.branches.local.create("master", commit)
        else:
            branch = repo2.branches["master"]
            branch.set_target(commit.id)

    endTime = time.time()
    elapsedTime = endTime - startTime

    secondsPerCommit = elapsedTime / totalCommits
    print("Total time: {0: >#0.1f} seconds ({1: >#0.3f}s/commit)".format(elapsedTime, secondsPerCommit))

if __name__ == "__main__":
    main()